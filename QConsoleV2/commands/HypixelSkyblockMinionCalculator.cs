using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace QConsole.commands
{
    public class HypixelSkyblockMinionCalculator : classes.Command
    {
        public HypixelSkyblockMinionCalculator()
        {
            SetName("minion");
        }

        public override void Run(string[] args)
        {
            Console.Write("Mithril Infusion -> ");
            bool mithrilInfusion = bool.Parse(Console.ReadLine());

            Console.Write("Flycatcher -> ");
            bool flycatcher = bool.Parse(Console.ReadLine());

            Console.Write("Please enter Minion cooldown -> ");
            float baseCoolodown = float.Parse(Console.ReadLine());

            Console.Write("Please enter total drops with this tier -> ");
            int baseDrops = int.Parse(Console.ReadLine());

            Console.Write("Please enter total amount of money generated by this tier per day -> ");
            int baseRevenue = int.Parse(Console.ReadLine());

            Console.Write("Please enter cost per minion -> ");
            int costPerMinion = int.Parse(Console.ReadLine());

            Console.Write("Please enter max minions -> ");
            int maxMinions = int.Parse(Console.ReadLine());

            int totalMinionCost = costPerMinion * maxMinions;

            if (mithrilInfusion)
            {
                baseCoolodown = baseCoolodown * 0.9f;
            }

            if (flycatcher)
            {
                baseCoolodown = baseCoolodown * 0.8f;
            }

            /**
             * Cooldown calculations
             */

            float cooldownBeacon = baseCoolodown * 0.92f;
            float cooldownFoulFlesh = baseCoolodown * 0.55f;
            float cooldownBeaconFoulFlesh = (baseCoolodown * 0.55f) * 0.92f;

            /**
             * Drop per action calculation
             */

            double agaf1 = (60 * 30) * 24;
            double agaf2 = (19 * baseDrops);

            double dropPerAction = agaf2 / agaf1;


            /**
             * Drops calculations
             * Per day drops
             */

            double dropsBeacon = ((((60 / cooldownBeacon) * dropPerAction) / 2) * 60) * 24;
            double dropsFoulFlesh = ((((60 / cooldownFoulFlesh) * dropPerAction) / 2) * 60) * 24;
            double dropsBeaconFoulFlesh = ((((60 / cooldownBeaconFoulFlesh) * dropPerAction) / 2) * 60) * 24;
            double dropsCatalyst = (((((60 / cooldownBeacon) * dropPerAction) / 2) * 60) * 24) * 3;
            double dropsHyperCatalyst = (((((60 / cooldownBeacon) * dropPerAction) / 2) * 60) * 24) * 4;

            /**
             * Coins calculations
             * Per day coins
             */

            double coinsBeacon = Math.Round((baseRevenue * dropsBeacon) / baseDrops);
            double coinsFoulFlesh = Math.Round((baseRevenue * dropsFoulFlesh) / baseDrops);
            double coinsBeaconFoulFlesh = Math.Round((baseRevenue * dropsBeaconFoulFlesh) / baseDrops);
            double coinsCatalyst = Math.Round((baseRevenue * dropsCatalyst) / baseDrops);
            double coinsHyperCatalyst = Math.Round((baseRevenue * dropsHyperCatalyst) / baseDrops);

            /**
             * Revenue calculations
             */

            int foulFleshCostPerMinion = 25000;
            int foulFleshTotalMinions = foulFleshCostPerMinion * maxMinions * 5;

            int catalyst = 110000;
            int hyperCatalyst = 137000;

            int catalystTotal = catalyst * maxMinions * 8;
            int hyperCatalystTotal = hyperCatalyst * maxMinions * 4;

            double baseRevenueTotal = baseRevenue * maxMinions;
            double beaconRevenueTotal = coinsBeacon * maxMinions;
            double foulFleshRevenueTotal = coinsFoulFlesh * maxMinions - foulFleshTotalMinions;
            double foulFleshBeaconRevenueTotal = coinsBeaconFoulFlesh * maxMinions - foulFleshTotalMinions;
            double catalystRevenueTotal = coinsCatalyst * maxMinions - catalystTotal;
            double hyperCatalystRevenueTotal = coinsHyperCatalyst * maxMinions - hyperCatalystTotal;


            /**
             * Time to cover investment
             */

            double baseInvestment = totalMinionCost / baseRevenueTotal;
            double beaconInvestment = totalMinionCost / beaconRevenueTotal;
            double foulFleshInvestment = totalMinionCost / foulFleshRevenueTotal;
            double beaconFoulFleshInvestment = totalMinionCost / foulFleshBeaconRevenueTotal;
            double catalystInvestment = totalMinionCost / catalystRevenueTotal;
            double hyperCatalystInvestment = totalMinionCost / hyperCatalystRevenueTotal;


            Console.WriteLine("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

            Console.WriteLine("Price:");
            Console.WriteLine(" • Minions -> " + totalMinionCost);
            Console.WriteLine(" • Foul Flesh -> " + foulFleshTotalMinions);
            Console.WriteLine(" • Catalysts -> " + catalystTotal);
            Console.WriteLine(" • Hyper Catalysts -> " + hyperCatalystTotal);

            Console.WriteLine("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

            Console.WriteLine("Cooldowns:");
            Console.WriteLine(" • Base cooldown -> " + baseCoolodown);
            Console.WriteLine(" • Beacon cooldown -> " + cooldownBeacon);
            Console.WriteLine(" • Foul flesh cooldown -> " + cooldownFoulFlesh);
            Console.WriteLine(" • Beacon + Foul flesh cooldown -> " + cooldownBeaconFoulFlesh);
            Console.WriteLine(" • Catalyst cooldown -> " + baseCoolodown);
            Console.WriteLine(" • Hyper Catalyst cooldown -> " + baseCoolodown);

            Console.WriteLine("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

            Console.WriteLine("Drops:");
            Console.WriteLine(" • Base drops -> " + baseDrops);
            Console.WriteLine(" • Base drops (Beacon enabled) -> " + dropsBeacon);
            Console.WriteLine(" • Foul flesh drops -> " + dropsFoulFlesh);
            Console.WriteLine(" • Foul flesh drops (Beacon enabled) -> " + dropsBeaconFoulFlesh);
            Console.WriteLine(" • Catalyst drops (Beacon enabled) -> " + dropsCatalyst);
            Console.WriteLine(" • Hyper Catalyst (Beacon enabled) -> " + dropsHyperCatalyst);

            Console.WriteLine(" ");

            Console.WriteLine(" • Drops per action -> " + dropPerAction);

            Console.WriteLine("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

            Console.WriteLine("Revenue:");
            Console.WriteLine(" • Base revenue -> " + baseRevenueTotal);
            Console.WriteLine(" • Beacon revenue -> " + beaconRevenueTotal);
            Console.WriteLine(" • Foul flesh revenue -> " + foulFleshRevenueTotal);
            Console.WriteLine(" • Beacon + Foul flesh revenue -> " + foulFleshBeaconRevenueTotal);

            Console.WriteLine(" • Catalyst revenue (Beacon enabled) -> " + catalystRevenueTotal);
            Console.WriteLine(" • Hyper Catalyst revenue (Beacon enabled) -> " + hyperCatalystRevenueTotal);

            Console.WriteLine("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

            Console.WriteLine("Coverage:");
            Console.WriteLine(" • Base coverage -> " + baseInvestment);
            Console.WriteLine(" • Beacon coverage -> " + beaconInvestment);
            Console.WriteLine(" • Foul flesh coverage -> " + foulFleshInvestment);
            Console.WriteLine(" • Beacon + Foul flesh coverage -> " + beaconFoulFleshInvestment);

            Console.WriteLine(" • Catalyst coverage (Beacon enabled) -> " + catalystInvestment);
            Console.WriteLine(" • Hyper Catalyst coverage (Beacon enabled) -> " + hyperCatalystInvestment);
        }
    }
}
